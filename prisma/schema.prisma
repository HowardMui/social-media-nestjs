// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_type {
  admin
  user
}

model User {
  userId      Int      @id @default(autoincrement())
  firstName String?
  LastName String?
  email   String   @unique
  userName String @unique
  image String?
  bio String?
  description String?
  isVerified Boolean @default(false)
  posts Post[] 
  rePosts UserRePost[]
  UserAuths UserAuth[]
  likedPosts   UserLikedPost[]
  comments       Comment[]
  followers User[] @relation(name: "Followers")
  following   User[]  @relation(name: "Followers")
  bookmarkedPosts UserBookmark[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @default(now())
}

model UserAuth{
  userAuthId Int @id @default(autoincrement())
  email String @unique
  hash String
  provider String?
  userId Int @unique
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @default(now())
}

model Admin {
  adminId Int @id @default(autoincrement())
  email String @unique
  displayName String @unique
  loginName String @unique
  avatar String?
  notificationToken String?
  role String?
  AdminAuth AdminAuth[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminAuth {
  adminAuthId Int @id @default(autoincrement())
  email String @unique
  loginName String
  hash String
  uid Int?
  provider String?
  adminId Int @unique
  Admin Admin @relation(fields: [adminId], references: [adminId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @default(now())
}


model Post{
  postId      Int      @id @default(autoincrement())
  image String?
  content String
  userId Int
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  rePostedByUser UserRePost[]
  likedByUser   UserLikedPost[]
  tags Tag[] @relation(name: "PostTags")
  comments       Comment[]
  bookmarkedByUser UserBookmark[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @default(now())
}

model Tag{
  tagId Int @id @default(autoincrement())
  tagName String @unique
  posts Post[] @relation(name: "PostTags")
}

model Comment {
  commentId         Int       @id @default(autoincrement())
  message    String
  user       User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId     Int
  post      Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId    Int
  parentCommentId Int?
  parentComment Comment? @relation("CommentParentChildren", fields: [parentCommentId], references: [commentId], onDelete: Cascade)
  comments Comment[] @relation("CommentParentChildren")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @default(now())
}

// * Explicit Many to many
model UserLikedPost {
  user   User @relation(fields: [userId], references: [userId])
  post  Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  userId Int
  postId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
  // @@index([userId])
  // @@index([postId])
  @@map("user_liked_posts")
}

model UserBookmark{
  postId Int
  post Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([postId, userId])
  @@map("user_bookmarked_posts")
}

model UserRePost {
  postId Int
  post Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([postId, userId])
  @@map("user_rePost_posts")
}